// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getUserByMail = `-- name: GetUserByMail :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users WHERE email = $1
`

func (q *Queries) GetUserByMail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByMail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT u.id FROM users u INNER JOIN refresh_tokens r ON u.id = r.user_id WHERE r.token = $1 AND r.expires_at > NOW() AND r.revoked_at IS NULL
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const subscribeUser = `-- name: SubscribeUser :exec
UPDATE users SET is_chirpy_red = true WHERE id = $1
`

func (q *Queries) SubscribeUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, subscribeUser, id)
	return err
}

const updateUserPassAndMailByID = `-- name: UpdateUserPassAndMailByID :one
UPDATE users SET email=$2, hashed_password = $3, updated_at = NOW() WHERE id = $1 RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateUserPassAndMailByIDParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
}

func (q *Queries) UpdateUserPassAndMailByID(ctx context.Context, arg UpdateUserPassAndMailByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassAndMailByID, arg.ID, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}
