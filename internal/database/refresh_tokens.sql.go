// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, expires_at, revoked_at, user_id)
VALUES (
	$1,
	NOW(),
	NOW(),
	$2,
    NULL,
    $3
)
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

type CreateRefreshTokenParams struct {
	Token     string
	ExpiresAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.ExpiresAt, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const deleteAllRefreshTokens = `-- name: DeleteAllRefreshTokens :exec
DELETE FROM refresh_tokens
`

func (q *Queries) DeleteAllRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllRefreshTokens)
	return err
}

const revokeTokenAccess = `-- name: RevokeTokenAccess :exec
UPDATE refresh_tokens SET expires_at = $2 WHERE token = $1
`

type RevokeTokenAccessParams struct {
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) RevokeTokenAccess(ctx context.Context, arg RevokeTokenAccessParams) error {
	_, err := q.db.ExecContext(ctx, revokeTokenAccess, arg.Token, arg.ExpiresAt)
	return err
}
